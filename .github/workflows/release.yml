name: Deploy Release
on:
  push:
    branches:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
env:
  CI: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: doclytics-${{ env.BRANCH_NAME }}-${{ matrix.os }}
          path: |
            ./target/${{ matrix.target }}/release/doclytics${{ matrix.os == 'windows-latest' && '.exe' || '' }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref }} != 'master' && ${{ github.ref }} != 'development'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/doclytics${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: doclytics-${{ env.BRANCH_NAME }}-${{ matrix.os }}
          asset_content_type: application/octet-stream
  build-docker:
    runs-on: ubuntu-latest
    if: ${{ github.ref }} != 'master' && ${{ github.ref }} != 'development'
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: production-artifacts
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/doclytics:${{ env.BRANCH_NAME }}
          platforms: linux/amd64,linux/arm64
      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1
        if: steps.semantic-release.outputs.release_created == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.semantic-release.outputs.release_upload_url }}
          asset_path: ./target/x86_64-apple-darwin/release/your-binary
          asset_name: your-binary-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        if: steps.semantic-release.outputs.release_created == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.semantic-release.outputs.release_upload_url }}
          asset_path: ./target/x86_64-pc-windows-msvc/release/your-binary.exe
          asset_name: your-binary-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        if: steps.semantic-release.outputs.release_created == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.semantic-release.outputs.release_upload_url }}
          asset_path: ./target/x86_64-unknown-linux-gnu/release/your-binary
          asset_name: your-binary-linux
          asset_content_type: application/octet-stream
